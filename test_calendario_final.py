#!/usr/bin/env python
"""
Script de prueba final del calendario
Verifica que toda la funcionalidad est√© funcionando correctamente
"""

import os
import sys
import django

# Configurar Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sma.settings')
django.setup()

from django.contrib.auth.models import User
from smapp.models import EventoCalendario, Curso, Perfil
from datetime import date, time, timedelta
from django.utils import timezone

def main():
    print("üéØ PRUEBA FINAL DEL CALENDARIO")
    print("=" * 50)
    
    # 1. Verificar usuarios
    print("\n1. üìä VERIFICANDO USUARIOS")
    admin_users = User.objects.filter(is_superuser=True)
    regular_users = User.objects.filter(is_superuser=False)
    
    print(f"   Administradores: {admin_users.count()}")
    print(f"   Usuarios regulares: {regular_users.count()}")
    
    if admin_users.exists():
        admin = admin_users.first()
        print(f"   Admin principal: {admin.username}")
    
    # 2. Verificar cursos
    print("\n2. üìö VERIFICANDO CURSOS")
    cursos = Curso.objects.filter(anio=timezone.now().year)
    print(f"   Cursos disponibles: {cursos.count()}")
    
    for curso in cursos[:5]:  # Mostrar solo los primeros 5
        print(f"   - {curso}")
    
    # 3. Verificar eventos
    print("\n3. üìÖ VERIFICANDO EVENTOS")
    eventos = EventoCalendario.objects.all()
    print(f"   Eventos totales: {eventos.count()}")
    
    # Crear evento de prueba si no hay eventos
    if eventos.count() == 0:
        print("   ‚öôÔ∏è Creando evento de prueba...")
        evento_prueba = EventoCalendario.objects.create(
            titulo="Evento de Prueba - Calendario",
            descripcion="Este es un evento creado autom√°ticamente para probar el calendario",
            fecha=date.today() + timedelta(days=1),
            hora_inicio=time(10, 0),
            hora_fin=time(11, 30),
            tipo_evento='general',
            prioridad='media',
            para_todos_los_cursos=True
        )
        print(f"   ‚úÖ Evento creado: {evento_prueba}")
    else:
        print("   üìã Eventos existentes:")
        for evento in eventos[:3]:  # Mostrar solo los primeros 3
            print(f"   - {evento.titulo} ({evento.fecha})")
    
    # 4. Verificar colores de eventos
    print("\n4. üé® VERIFICANDO COLORES DE EVENTOS")
    eventos_test = EventoCalendario.objects.all()[:3]
    for evento in eventos_test:
        try:
            color = evento.color_por_tipo
            print(f"   - {evento.tipo_evento}: {color}")
        except Exception as e:
            print(f"   ‚ùå Error en color de {evento.titulo}: {e}")
    
    # 5. Verificar permisos y contexto
    print("\n5. üîê VERIFICANDO L√ìGICA DE PERMISOS")
    
    # Simular diferentes tipos de usuarios
    tipos_usuario = ['administrador', 'director', 'profesor', 'estudiante']
    
    for tipo in tipos_usuario:
        puede_crear = tipo in ['administrador', 'director', 'profesor']
        print(f"   - {tipo.capitalize()}: {'‚úÖ Puede crear eventos' if puede_crear else '‚ùå Solo ver eventos'}")
    
    # 6. Verificar template y elementos cr√≠ticos
    print("\n6. üìÑ VERIFICANDO TEMPLATE")
    template_path = 'templates/calendario.html'
    
    if os.path.exists(template_path):
        with open(template_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        elementos_criticos = [
            'modalCrearEvento',
            'formCrearEvento',
            'dirigido_especificos',
            'cursosEspecificos',
            'hora_inicio',
            'hora_fin',
            'cursos_especificos'
        ]
        
        print("   Elementos cr√≠ticos encontrados:")
        for elemento in elementos_criticos:
            if elemento in content:
                print(f"   ‚úÖ {elemento}")
            else:
                print(f"   ‚ùå {elemento} - FALTA")
    else:
        print("   ‚ùå Template no encontrado")
    
    # 7. Verificar funciones JavaScript cr√≠ticas
    print("\n7. üöÄ VERIFICANDO JAVASCRIPT")
    if os.path.exists(template_path):
        with open(template_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        funciones_js = [
            'validarHoras',
            'validarCursosEspecificos',
            'showAlert',
            'FullCalendar',
            'bootstrap.Modal'
        ]
        
        print("   Funciones JavaScript:")
        for funcion in funciones_js:
            if funcion in content:
                print(f"   ‚úÖ {funcion}")
            else:
                print(f"   ‚ùå {funcion} - FALTA")
    
    print("\n" + "=" * 50)
    print("üéâ RESUMEN DE LA PRUEBA")
    print("=" * 50)
    
    print("‚úÖ FUNCIONALITIES IMPLEMENTADAS:")
    print("   - Calendario con FullCalendar")
    print("   - Modal para crear eventos")
    print("   - Validaci√≥n de horas (inicio < fin)")
    print("   - Selecci√≥n de cursos espec√≠ficos")
    print("   - Filtros por fecha y curso")
    print("   - Permisos por tipo de usuario")
    print("   - Tabla de pr√≥ximos eventos")
    print("   - Colores por tipo de evento")
    print("   - Env√≠o AJAX de formularios")
    
    print("\nüìã PR√ìXIMOS PASOS:")
    print("   1. Probar en navegador: http://127.0.0.1:8000/calendario/")
    print("   2. Verificar que el modal se abra correctamente")
    print("   3. Probar creaci√≥n de eventos con diferentes configuraciones")
    print("   4. Verificar que las validaciones funcionen")
    print("   5. Probar con diferentes tipos de usuarios")
    
    print(f"\nüïê Prueba completada: {timezone.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == '__main__':
    main()
