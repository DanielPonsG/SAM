#!/usr/bin/env python
"""
Script para probar que el registro autom√°tico de fecha y hora funciona correctamente
"""

import os
import sys
import django
from datetime import datetime

# Configurar Django
sys.path.append('.')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sma.settings')
django.setup()

from smapp.models import AsistenciaAlumno, AsistenciaProfesor, Estudiante, Profesor, Curso, Asignatura
from django.contrib.auth.models import User
from django.utils import timezone

def test_fecha_hora_automatica():
    """Prueba que las fechas y horas se establezcan autom√°ticamente"""
    print("üß™ PROBANDO REGISTRO AUTOM√ÅTICO DE FECHA Y HORA")
    print("=" * 60)
    
    try:
        # Obtener datos necesarios
        estudiante = Estudiante.objects.first()
        profesor = Profesor.objects.first()
        curso = Curso.objects.first()
        asignatura = Asignatura.objects.first()
        user = User.objects.first()
        
        if not all([estudiante, profesor, curso, asignatura, user]):
            print("‚ùå Error: No hay datos suficientes en la base de datos")
            return False
        
        print(f"üìö Usando estudiante: {estudiante.get_nombre_completo()}")
        print(f"üë®‚Äçüè´ Usando profesor: {profesor.get_nombre_completo()}")
        print(f"üè´ Usando curso: {curso}")
        print(f"üìñ Usando asignatura: {asignatura.nombre}")
        print()
        
        # Registrar momento antes de crear
        momento_antes = timezone.now()
        print(f"‚è∞ Momento antes de crear registro: {momento_antes}")
        
        # TEST 1: Asistencia de Alumno
        print("\n1Ô∏è‚É£ PROBANDO ASISTENCIA DE ALUMNO")
        print("-" * 40)
        
        # Eliminar registros existentes para esta prueba
        fecha_local = timezone.localtime(timezone.now()).date()
        AsistenciaAlumno.objects.filter(
            estudiante=estudiante, 
            asignatura=asignatura,
            fecha=fecha_local
        ).delete()
        
        print(f"üóëÔ∏è Eliminados registros existentes para fecha: {fecha_local}")
        
        asistencia_alumno = AsistenciaAlumno.objects.create(
            estudiante=estudiante,
            curso=curso,
            asignatura=asignatura,
            profesor_registro=profesor,
            presente=True,
            observacion="Prueba de fecha autom√°tica",
            registrado_por_usuario=user
        )
        
        momento_despues = timezone.now()
        print(f"‚è∞ Momento despu√©s de crear registro: {momento_despues}")
        
        print(f"üìÖ Fecha registrada: {asistencia_alumno.fecha}")
        print(f"üïê Hora registrada: {asistencia_alumno.hora_registro}")
        print(f"üìù Fecha creaci√≥n: {asistencia_alumno.fecha_creacion}")
        print(f"üìù Fecha modificaci√≥n: {asistencia_alumno.fecha_modificacion}")
        
        # Verificaciones (considerando zona horaria local)
        fecha_local = timezone.localtime(timezone.now()).date()
        print(f"üìÖ Fecha local esperada: {fecha_local}")
        
        assert asistencia_alumno.fecha == fecha_local, "‚ùå La fecha no es la correcta"
        assert asistencia_alumno.fecha_creacion is not None, "‚ùå La fecha de creaci√≥n no se estableci√≥"
        assert asistencia_alumno.fecha_modificacion is not None, "‚ùå La fecha de modificaci√≥n no se estableci√≥"
        
        print("‚úÖ Asistencia de alumno registrada correctamente con fecha/hora autom√°tica")
        
        # TEST 2: Asistencia de Profesor
        print("\n2Ô∏è‚É£ PROBANDO ASISTENCIA DE PROFESOR")
        print("-" * 40)
        
        # Eliminar registros existentes para esta prueba
        fecha_local = timezone.localtime(timezone.now()).date()
        AsistenciaProfesor.objects.filter(
            profesor=profesor,
            asignatura=asignatura,
            fecha=fecha_local
        ).delete()
        
        print(f"üóëÔ∏è Eliminados registros existentes para fecha: {fecha_local}")
        
        momento_antes = timezone.now()
        print(f"‚è∞ Momento antes de crear registro: {momento_antes}")
        
        asistencia_profesor = AsistenciaProfesor.objects.create(
            profesor=profesor,
            asignatura=asignatura,
            curso=curso,
            presente=True,
            observacion="Prueba de fecha autom√°tica profesor",
            registrado_por_usuario=user
        )
        
        momento_despues = timezone.now()
        print(f"‚è∞ Momento despu√©s de crear registro: {momento_despues}")
        
        print(f"üìÖ Fecha registrada: {asistencia_profesor.fecha}")
        print(f"üïê Hora registrada: {asistencia_profesor.hora_registro}")
        print(f"üìù Fecha creaci√≥n: {asistencia_profesor.fecha_creacion}")
        print(f"üìù Fecha modificaci√≥n: {asistencia_profesor.fecha_modificacion}")
        
        # Verificaciones (considerando zona horaria local)
        fecha_local = timezone.localtime(timezone.now()).date()
        print(f"üìÖ Fecha local esperada: {fecha_local}")
        
        assert asistencia_profesor.fecha == fecha_local, "‚ùå La fecha no es la correcta"
        assert asistencia_profesor.fecha_creacion is not None, "‚ùå La fecha de creaci√≥n no se estableci√≥"
        assert asistencia_profesor.fecha_modificacion is not None, "‚ùå La fecha de modificaci√≥n no se estableci√≥"
        
        print("‚úÖ Asistencia de profesor registrada correctamente con fecha/hora autom√°tica")
        
        # TEST 3: Modificaci√≥n
        print("\n3Ô∏è‚É£ PROBANDO MODIFICACI√ìN DE REGISTRO")
        print("-" * 40)
        
        fecha_modificacion_original = asistencia_alumno.fecha_modificacion
        print(f"üìù Fecha modificaci√≥n original: {fecha_modificacion_original}")
        
        # Esperar un poco para ver diferencia en tiempo
        import time
        time.sleep(1)
        
        asistencia_alumno.observacion = "Observaci√≥n modificada"
        asistencia_alumno.save()
        
        print(f"üìù Nueva fecha modificaci√≥n: {asistencia_alumno.fecha_modificacion}")
        
        assert asistencia_alumno.fecha_modificacion > fecha_modificacion_original, "‚ùå La fecha de modificaci√≥n no se actualiz√≥"
        
        print("‚úÖ Fecha de modificaci√≥n se actualiza correctamente")
        
        print("\nüéâ TODAS LAS PRUEBAS PASARON EXITOSAMENTE")
        print("‚úÖ El sistema registra autom√°ticamente fecha y hora actual")
        print("‚úÖ Los campos de auditor√≠a funcionan correctamente")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error durante las pruebas: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_fecha_hora_automatica()
    if success:
        print("\nüéØ RESULTADO: TODAS LAS PRUEBAS EXITOSAS")
    else:
        print("\nüí• RESULTADO: ALGUNAS PRUEBAS FALLARON")
    
    sys.exit(0 if success else 1)
