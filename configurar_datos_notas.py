#!/usr/bin/env python
"""
Script para crear datos de prueba completos para el sistema de gesti√≥n de notas
Incluye: usuarios, profesores, estudiantes, cursos, asignaturas, grupos, inscripciones y calificaciones
"""

import os
import django
import sys
from datetime import date, datetime, timedelta
import random

# Configurar Django
sys.path.append('.')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sma.settings')
django.setup()

from django.contrib.auth.models import User
from smapp.models import (
    Estudiante, Profesor, Curso, Asignatura, Grupo, 
    Inscripcion, Calificacion, Perfil, PeriodoAcademico
)

def crear_periodo_academico():
    """Crear periodo acad√©mico actual"""
    periodo, created = PeriodoAcademico.objects.get_or_create(
        nombre="Primer Semestre 2025",
        defaults={
            'fecha_inicio': date(2025, 3, 1),
            'fecha_fin': date(2025, 7, 31),
            'activo': True
        }
    )
    if created:
        print(f"‚úì Periodo acad√©mico creado: {periodo.nombre}")
    else:
        print(f"‚úì Periodo acad√©mico existente: {periodo.nombre}")
    return periodo

def crear_grupos_y_inscripciones():
    """Crear grupos e inscripciones de estudiantes"""
    print("\n--- CREANDO GRUPOS E INSCRIPCIONES ---")
    
    periodo = PeriodoAcademico.objects.first()
    if not periodo:
        periodo = crear_periodo_academico()
    
    # Obtener cursos y asignaturas del a√±o actual
    cursos_actuales = Curso.objects.filter(anio=2025)
    asignaturas = Asignatura.objects.all()
    profesores = Profesor.objects.all()
    estudiantes = Estudiante.objects.all()
    
    grupos_creados = 0
    inscripciones_creadas = 0
    
    # Crear grupos para cada curso y asignatura
    for curso in cursos_actuales:
        # Asignar asignaturas b√°sicas a cada curso
        asignaturas_curso = asignaturas[:6]  # Primeras 6 asignaturas para cada curso
        
        for asignatura in asignaturas_curso:
            # Asignar profesor aleatoriamente
            profesor = random.choice(profesores) if profesores else None
            
            # Crear o obtener grupo
            grupo, created = Grupo.objects.get_or_create(
                asignatura=asignatura,
                profesor=profesor,
                periodo_academico=periodo,
                defaults={
                    'capacidad_maxima': 35
                }
            )
            
            if created:
                grupos_creados += 1
                print(f"  ‚úì Grupo creado: {grupo}")
                
                # Inscribir estudiantes del curso en el grupo
                estudiantes_curso = curso.estudiantes.all()
                for estudiante in estudiantes_curso:
                    inscripcion, inscripcion_created = Inscripcion.objects.get_or_create(
                        estudiante=estudiante,
                        grupo=grupo,
                        defaults={
                            'fecha_inscripcion': date.today()
                        }
                    )
                    
                    if inscripcion_created:
                        inscripciones_creadas += 1
    
    print(f"‚úì Total grupos creados: {grupos_creados}")
    print(f"‚úì Total inscripciones creadas: {inscripciones_creadas}")

def crear_calificaciones_demo():
    """Crear calificaciones de demostraci√≥n"""
    print("\n--- CREANDO CALIFICACIONES DE DEMOSTRACI√ìN ---")
    
    inscripciones = Inscripcion.objects.all()
    if not inscripciones:
        print("‚ùå No hay inscripciones para crear calificaciones")
        return
    
    tipos_evaluacion = [
        "Prueba Unidad 1", "Prueba Unidad 2", "Prueba Unidad 3",
        "Tarea 1", "Tarea 2", "Tarea 3",
        "Control de Lectura", "Examen Parcial", "Examen Final",
        "Proyecto", "Presentaci√≥n Oral", "Laboratorio"
    ]
    
    detalles = [
        "Evaluaci√≥n escrita", "Evaluaci√≥n pr√°ctica", "Trabajo en grupo",
        "Trabajo individual", "Presentaci√≥n", "Investigaci√≥n"
    ]
    
    descripciones = [
        "Evaluaci√≥n correspondiente a los contenidos revisados en clase durante la unidad.",
        "Actividad pr√°ctica que eval√∫a la aplicaci√≥n de conceptos te√≥ricos.",
        "Trabajo colaborativo que fomenta el aprendizaje entre pares.",
        "Evaluaci√≥n individual que mide el dominio personal de la materia.",
        "Presentaci√≥n oral que desarrolla habilidades comunicativas.",
        "Proyecto de investigaci√≥n que profundiza en temas espec√≠ficos."
    ]
    
    calificaciones_creadas = 0
    
    # Crear 3-5 calificaciones por inscripci√≥n
    for inscripcion in inscripciones:
        num_calificaciones = random.randint(3, 5)
        
        for i in range(num_calificaciones):
            # Generar datos aleatorios realistas
            puntaje = round(random.uniform(4.0, 7.0), 1)  # Notas chilenas
            porcentaje = random.choice([10, 15, 20, 25, 30])
            
            calificacion = Calificacion.objects.create(
                inscripcion=inscripcion,
                nombre_evaluacion=random.choice(tipos_evaluacion),
                puntaje=puntaje,
                porcentaje=porcentaje,
                detalle=random.choice(detalles),
                descripcion=random.choice(descripciones),
                fecha_evaluacion=date.today() - timedelta(days=random.randint(1, 60))
            )
            
            calificaciones_creadas += 1
    
    print(f"‚úì Total calificaciones creadas: {calificaciones_creadas}")

def asignar_estudiantes_a_cursos():
    """Asignar estudiantes existentes a cursos"""
    print("\n--- ASIGNANDO ESTUDIANTES A CURSOS ---")
    
    estudiantes = Estudiante.objects.all()
    cursos_actuales = Curso.objects.filter(anio=2025)
    
    asignaciones = 0
    
    for estudiante in estudiantes:
        # Asignar cada estudiante a un curso aleatorio
        if cursos_actuales:
            curso = random.choice(cursos_actuales)
            curso.estudiantes.add(estudiante)
            asignaciones += 1
            print(f"  ‚úì {estudiante.get_nombre_completo()} ‚Üí {curso.nombre}")
    
    print(f"‚úì Total asignaciones: {asignaciones}")

def configurar_profesores_jefe():
    """Configurar profesores jefe para los cursos"""
    print("\n--- CONFIGURANDO PROFESORES JEFE ---")
    
    cursos = Curso.objects.filter(anio=2025)
    profesores = Profesor.objects.all()
    
    if not profesores:
        print("‚ùå No hay profesores disponibles")
        return
    
    configurados = 0
    
    for curso in cursos:
        if not curso.profesor_jefe:
            profesor = random.choice(profesores)
            curso.profesor_jefe = profesor
            curso.save()
            configurados += 1
            print(f"  ‚úì {curso.nombre} ‚Üí Prof. Jefe: {profesor.get_nombre_completo()}")
    
    print(f"‚úì Total profesores jefe configurados: {configurados}")

def asignar_asignaturas_profesores():
    """Asignar asignaturas a profesores"""
    print("\n--- ASIGNANDO ASIGNATURAS A PROFESORES ---")
    
    profesores = Profesor.objects.all()
    asignaturas = Asignatura.objects.all()
    
    asignaciones = 0
    
    for profesor in profesores:
        # Asignar 2-4 asignaturas por profesor
        num_asignaturas = random.randint(2, 4)
        asignaturas_profesor = random.sample(list(asignaturas), min(num_asignaturas, len(asignaturas)))
        
        for asignatura in asignaturas_profesor:
            profesor.asignaturas.add(asignatura)
            asignaciones += 1
        
        print(f"  ‚úì {profesor.get_nombre_completo()}: {len(asignaturas_profesor)} asignaturas")
    
    print(f"‚úì Total asignaciones: {asignaciones}")

def verificar_datos_sistema():
    """Verificar que todos los datos est√©n correctamente creados"""
    print("\n--- VERIFICACI√ìN FINAL ---")
    
    print(f"‚úì Usuarios: {User.objects.count()}")
    print(f"‚úì Perfiles: {Perfil.objects.count()}")
    print(f"‚úì Profesores: {Profesor.objects.count()}")
    print(f"‚úì Estudiantes: {Estudiante.objects.count()}")
    print(f"‚úì Cursos: {Curso.objects.count()}")
    print(f"‚úì Asignaturas: {Asignatura.objects.count()}")
    print(f"‚úì Grupos: {Grupo.objects.count()}")
    print(f"‚úì Inscripciones: {Inscripcion.objects.count()}")
    print(f"‚úì Calificaciones: {Calificacion.objects.count()}")
    print(f"‚úì Periodos Acad√©micos: {PeriodoAcademico.objects.count()}")
    
    # Verificar que hay datos para probar cada tipo de usuario
    directores = User.objects.filter(perfil__tipo_usuario='director').count()
    profesores = User.objects.filter(perfil__tipo_usuario='profesor').count()
    alumnos = User.objects.filter(perfil__tipo_usuario='alumno').count()
    
    print(f"\nüìä USUARIOS POR TIPO:")
    print(f"   - Directores: {directores}")
    print(f"   - Profesores: {profesores}")
    print(f"   - Alumnos: {alumnos}")
    
    # Estad√≠sticas adicionales
    from django.db.models import Avg
    promedio_notas = Calificacion.objects.aggregate(Avg('puntaje'))['puntaje__avg']
    if promedio_notas:
        print(f"\nüìà ESTAD√çSTICAS:")
        print(f"   - Promedio general de notas: {promedio_notas:.2f}")

def main():
    """Funci√≥n principal"""
    print("üèóÔ∏è  CONFIGURANDO SISTEMA DE GESTI√ìN DE NOTAS")
    print("=" * 60)
    
    # Crear periodo acad√©mico
    crear_periodo_academico()
    
    # Asignar estudiantes a cursos
    asignar_estudiantes_a_cursos()
    
    # Configurar profesores jefe
    configurar_profesores_jefe()
    
    # Asignar asignaturas a profesores
    asignar_asignaturas_profesores()
    
    # Crear grupos e inscripciones
    crear_grupos_y_inscripciones()
    
    # Crear calificaciones de demostraci√≥n
    crear_calificaciones_demo()
    
    # Verificar datos
    verificar_datos_sistema()
    
    print("\n" + "=" * 60)
    print("üéâ ¬°SISTEMA CONFIGURADO EXITOSAMENTE!")
    print("üìã El sistema de gesti√≥n de notas est√° listo para usar")
    print("üöÄ Puedes probar todas las funcionalidades ahora")

if __name__ == '__main__':
    main()
